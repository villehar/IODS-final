summary(dist_eu)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
km2 <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km2$cluster)
km3 <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 3, col = classe
plot(lda.fit, dimen = 3, col = classes, pch = classes)
plot(lda.fit, dimen = 3, col = clusters, pch = clusters)
plot(lda.fit, dimen = 3, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
km3 <-kmeans(dist_eu, centers = 4)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 3, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
km3 <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = km3
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = km3$cl
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
data('Boston')
BostonScaled <- scale(Boston)
set.seed(123)
# euclidean distance matrix
dist_eu <- dist(BostonScaled)
summary(dist_eu)
# determine the maximum number of clusters
k_max <- 10
# calculate the total within sum of squares of each kmeans solution with a varying amount of clusters
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
# visualize the results
plot(1:k_max, twcss, type='b')
# k-means clustering
km2 <-kmeans(dist_eu, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km2$cluster)
km3 <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
model_predictors <- dplyr::select(train, -crime)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
class(model_predictors)
model_predictors <- as.matrix(model_predictors)
matrix_product <- model_predictors %*% lda.fit$scaling
class(lda.fit$scaling)
ldascaling <- lda.fit$scaling
matrix_product <- model_predictors %*% ldascaling
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
head(hd)
head(gii)
str(gii)
names(hd)
class(hd)
rename(hd, c("HDI.Rank"="rhdi", "Human.Development.Index..HDI."="hdi", "Expected.Years.of.Education"="edu", "Gross.National.Income..GNI..per.Capita"="GNI", "Country"="country", "Life.Expectancy.at.Birth"="lexp", "Mean.Years.of.Education"="eduyears", "Mean.Years.of.Education"="eduyears", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnihdi.ratio"))
rename(hd, c("HDI.Rank"="rhdi", "Human.Development.Index..HDI."="hdi", "Expected.Years.of.Education"="edu", "Gross.National.Income..GNI..per.Capita"="GNI", "Country"="country", "Life.Expectancy.at.Birth"="lexp", "Mean.Years.of.Education"="eduyears", "Mean.Years.of.Education"="eduyears", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnihdi.ratio"))
library(plyr)
rename(hd, c("HDI.Rank"="rhdi", "Human.Development.Index..HDI."="hdi", "Expected.Years.of.Education"="edu", "Gross.National.Income..GNI..per.Capita"="GNI", "Country"="country", "Life.Expectancy.at.Birth"="lexp", "Mean.Years.of.Education"="eduyears", "Mean.Years.of.Education"="eduyears", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnihdi.ratio"))
names(hd)
rename(hd, c("HDI.Rank"="rhdi", "Country"="countr", "Human.Development.Index..HDI."="hdi", "Life.Expectancy.at.Birth"="lifexp", "Expected.Years.of.Education"="eduexp", "Mean.Years.of.Education"="edumean", "Gross.National.Income..GNI..per.Capita"="gni", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnhd"))
names(hd)
rename(hd, c("HDI.Rank"="rhdi", "Country"="countr", "Human.Development.Index..HDI."="hdi", "Life.Expectancy.at.Birth"="lifexp", "Expected.Years.of.Education"="eduexp", "Mean.Years.of.Education"="edumean", "Gross.National.Income..GNI..per.Capita"="gni", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnhd"))
rename(hd, c("HDI.Rank"="rhdi", "Country"="countr", "Human.Development.Index..HDI."="hdi"))
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
human <- read.csv("data/human.csv", header = TRUE, row.names = 1)
str(human)
library(GGally)
ggpairs(human)
library(corrplot)
library(dplyr)
# plotting the correlation matrix
cor(human) %>% corrplot(, type="upper", order="hclust")
pca_human <- prcomp(human)
summary(pca_human)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
humanz <- scale(human)
pca_humanz <- prcomp(humanz)
summary(pca_humanz)
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
library(captioner)
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
library(captioner)
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
library(captioner)
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
```{r functions, include=FALSE}
fig <- local({
i <- 0
ref <- list()
list(
cap=function(refName, text) {
i <<- i + 1
ref[[refName]] <<- i
paste("Figure ", i, ": ", text, sep="")
},
ref=function(refName) {
ref[[refName]]
})
})
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
fig <- local({
i <- 0
ref <- list()
list(
cap=function(refName, text) {
i <<- i + 1
ref[[refName]] <<- i
paste("Figure ", i, ": ", text, sep="")
},
ref=function(refName) {
ref[[refName]]
})
})
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
fig <- local({
i <- 0
ref <- list()
list(
cap=function(refName, text) {
i <<- i + 1
ref[[refName]] <<- i
paste("Figure ", i, ": ", text, sep="")
},
ref=function(refName) {
ref[[refName]]
})
})
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
install.packages("FactoMineR")
library(Factominer)
library(FactoMineR)
data("tea")
str(tea)
library(GGally)
library(ggplot2)
library(tidyr)
library(dplyr)
gather(Boston) %>% glimpse
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram()
gather(tea) %>% glimpse
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram()
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram() + stat="count"
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free", stat="count") + geom_histogram()
gather(tea) %>% ggplot(aes(value), stat="count") + facet_wrap("key", scales = "free") + geom_histogram()
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram(stat="count")
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
```{r, fig.height=10}
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(GGally)
library(ggplot2)
library(tidyr)
library(dplyr)
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
mca <- MCA(tea, graph = FALSE)
mca <- MCA(tea, graph = FALSE)
keep_columns <- c("Tea", "always", "how", "effect.on.health", "where", "healthy", "relaxing")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("always", "how", "effect.on.health", "where", "healthy", "sophisticated")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "sophisticated", "price")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "escape.exotism")
tea_time <- select(tea, one_of(keep_columns))
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "escape.exoticism")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "age_Q")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "sex", "slimming")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "sex", "frequency")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "sex", "frequency", "work", "sugar", "spirituality", "friends")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "work", "sugar", "spirituality", "friends")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
library(devtools)
install_github("ggbiplot", "vqv")
install.packages("ggbiplot")
library(ggbiplot)
biplot(tea_time, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
install_github("kassambara/factoextra")
library("factoextra")
library("devtools")
install_github("kassambara/factoextra")
install.packages("factoextra")
library("factoextra")
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text"),
label = "all", invisible = "none", labelsize = 4, pointsize = 2,
habillage = "none", addEllipses = FALSE, ellipse.level = 0.95,
col.ind = "blue", col.ind.sup = "darkblue", alpha.ind = 1,
col.var = "red", alpha.var = 1, col.quanti.sup = "blue",
col.quali.sup = "darkgreen", shape.ind = 19, shape.var = 17,
select.var = list(name = NULL, cos2 = NULL, contrib = NULL),
select.ind = list(name = NULL, cos2 = NULL, contrib = NULL),
map = "symmetric", arrows = c(FALSE, FALSE),
jitter = list(what = "label", width = NULL, height = NULL), ...)
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text"))
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text"))
p <- fviz_mca_ind(mca, label="none", habillage=grp,
addEllipses=TRUE, ellipse.level=0.95)
p <- fviz_mca_ind(mca, label="none",
addEllipses=TRUE, ellipse.level=0.95)
print(p)
p <- fviz_mca_ind(mca, label="none")
print(p)
fviz_mca_biplot(X, axes = c(1, 2), geom = c("point", "arrow"),
label = "none")
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "arrow"),
label = "none")
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all")
library(dplyr)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
cor(human) %>% corrplot(human, type="upper", order="hclust")
cor(human) %>% corrplot(, type="upper", order="hclust")
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
select(tea, -age) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% select(tea, -age) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
str(tea)
gather(tea) %>% select(tea, -age) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
tea_time <- select(tea, -age)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
tea_time <- select(tea, one_of(c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all")
library(ggplot2)
library(tidyr)
library(dplyr)
tea_time <- select(tea, one_of(c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
install.packages("geepack")
library(geepack)
mf <- formula(accept ~ unfairness + emo + touch)
gee1 <- geeglm(mf, data=unfair.resp, id = pp, family="binomial",corstr="independence")
unfair.resp = read.csv(file = "responder.csv", header = TRUE)
str(unfair.resp)
library(dplyr)
unfair <- unfair.resp
unfair$pp_sex <- as.numeric(unfair$pp_sex)
agg.unfair <- aggregate(unfair[1:2], by=list(unfair$pp), FUN=mean)
agg.unfair %>% select(pp, pp_sex) %>% group_by(pp_sex) %>% summarise(count = n())
summary(unfair.resp)
library(tidyr)
library(GGally)
library(ggplot2)
unfair_small <- unfair.resp[,c(16,10,12,11,13)]
unfair_small$accept <- as.factor(unfair_small$accept)
explorative_plot <- ggpairs(unfair_small, title = "Distribution and associations of the ultimatum data", mapping = aes(color = unfairness), lower=list(combo=wrap("facethist",binwidth=10)))
explorative_plot
unfair.resp %>% select(unfairness, emo, touch, accept, RT) %>% group_by(touch, emo) %>% summarise(count = n(), reaction_time = mean(RT), Amount_of_acceptances = sum(accept))
naive <- glm(accept ~ unfairness + emo + touch, data = unfair.resp, family = "binomial")
summary(naive)
OR <- coef(naive) %>% exp
CI <- confint(naive) %>% exp
CI <- confint(naive) %>% exp
cbind(OR, CI)
naive2 <- glm(accept ~ unfairness + emo + touch + emo:touch, data = unfair.resp, family = "binomial")
summary(naive2)
anova(naive, naive2, test ="Chisq")
gee1 <- geeglm(mf, data=unfair.resp, id = pp, family="binomial",corstr="independence")
summary(gee1)
mf <- formula(accept ~ unfairness + emo + touch)
gee_exh <- geeglm(mf, data=unfair.resp, id = pp, family="binomial",corstr="exchangeable")
summary(gee1)
mf <- formula(accept ~ unfairness + emo + touch)
gee_ar1 <- geeglm(mf, data=unfair.resp, id = pp, family="binomial",corstr="ar1")
summary(gee1)
summary(gee_exh)
summary(gee_ar1)
anova(gee_exh, gee_ar1, test ="Chisq")
?anova
mfi <- formula(accept ~ unfairness + emo * touch)
gee_ar2 <- geeglm(mfi, data=unfair.resp, id = pp, family="binomial",corstr="ar1")
summary(gee_ar1)
mfi <- formula(accept ~ unfairness + emo + touch + emo:touch)
gee_ar2 <- geeglm(mfi, data=unfair.resp, id = pp, family="binomial",corstr="ar1")
summary(gee_ar1)
mfi <- formula(accept ~ unfairness + emo + touch + emo*touch)
gee_ar2 <- geeglm(mfi, data=unfair.resp, id = pp, family="binomial",corstr="ar1")
summary(gee_ar1)
OR <- coef(gee_ar1) %>% exp
CI <- confint(gee_ar1) %>% exp
cbind(OR, CI)
library(tidyverse)
library(broom)
diag(vcov(gee_ar1))
get.or.se <- function(model) {
broom::tidy(model) %>%
mutate(or = exp(Estimate),
var.diag = diag(vcov(model)),
or.se = sqrt(or^2 * var.diag)) %>%
select(or.se) %>% unlist %>% unname
}
get.or.se(gee_ar1)
get.or.se <- function(model) {
broom::tidy(model) %>%
mutate(or = exp(estimate),
var.diag = diag(vcov(model)),
or.se = sqrt(or^2 * var.diag)) %>%
select(or.se) %>% unlist %>% unname
}
get.or.se(gee_ar1)
broom::tidy(model)
broom::tidy(gee_ar1)
install.packages("gmm")
library(gmm)
get.or.se <- function(model) {
broom::tidy(model) %>%
mutate(or = exp(estimate),
var.diag = diag(vcov(model)),
or.se = sqrt(or^2 * var.diag)) %>%
select(or.se) %>% unlist %>% unname
}
get.or.se(gee_ar1)
get.or.se <- function(model) {
broom::tidy(model) %>%
mutate(or = exp(estimate),
var.diag = diag(gmm::vcov(model)),
or.se = sqrt(or^2 * var.diag)) %>%
select(or.se) %>% unlist %>% unname
}
get.or.se(gee_ar1)
get.or.se <- function(model) {
broom::tidy(model) %>%
mutate(or = exp(estimate),
var.diag = diag(vcov(model)),
or.se = sqrt(or^2 * var.diag)) %>%
select(or.se) %>% unlist %>% unname
}
get.or.se(gee_ar1)
confint(gee_ar1)
gee_ar1
summary(gee_ar1)
cc <- coef(summary(gee_ar1))
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
rownames(citab) <- rownames(cc)
cc
citab
exp(citab)
OR <- coef(gee_ar1) %>% exp
OR
lower <- gee_ar1$Estimate-1.96*Std.err
lower <- gee_ar1$Estimate-1.96*gee_ar1$Std.err
upper <- gee_ar1$Estimate+1.96*gee_ar1$Std.err
cbind(OR, lower, upper)
cbind(OR, lower)
lower <- gee_ar1$Estimate-1.96*gee_ar1$Std.err
upper <- gee_ar1$Estimate+1.96*gee_ar1$Std.err
cbind(OR, lower)
lower
lower <- summary(gee_ar1) %>% Estimate-1.96*Std.err
summary(gee_ar1)
lower <- summary(gee_ar1) %>% Estimate-1.96*Std.err
OR <- coef(gee_ar1) %>% exp
lower
upper <- gee_ar1$Estimate+1.96*gee_ar1$Std.err
cbind(OR, lower)
model.df <- tidy(gee_ar1)
model.df
model.df %>% mutate(or = exp(estimate), var.diag = diag(vcov(model)), or.se = sqrt(or^2 * var.diag))
model.df %>% mutate(or = exp(estimate), var.diag = diag(vcov(gee_ar1)), or.se = sqrt(or^2 * var.diag))
model.df %>% mutate(or = exp(estimate), var.diag = diag(vcov(model.df)), or.se = sqrt(or^2 * var.diag))
diag(vcov(model.df)
diag(vcov(model.df))
vcov(model.df)
OR <- coef(gee_ar1) %>% exp
CI <- confint(gee_ar1) %>% exp
cbind(OR, CI)
library(geepack)
mf <- formula(accept ~ unfairness + emo + touch)
gee_exh <- geeglm(mf, data=unfair.resp, id = pp, family="binomial",corstr="exchangeable")
gee_exh <- geeglm(mf, data=unfair.resp, id = pp, family="binomial",corstr="exchangeable")
summary(gee_exh)
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
cc <- coef(summary(gee1))
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
cc
citab
CI <- citab %>% exp
OR <- coef(gee_ar1) %>% exp
CI <- citab %>% exp
cbind(OR, CI)
cc <- coef(summary(gee_ar1))
citab <- with(as.data.frame(cc),
cbind(lwr=Estimate-1.96*Std.err,
upr=Estimate+1.96*Std.err))
CI <- citab %>% exp
cbind(OR, CI)
unfair.resp %>% select(unfairness, emo, touch, accept, RT) %>% group_by(touch, emo) %>% summarise(count = n(), reaction_time = mean(RT), Amount_of_acceptances = mean(accept))
unfair.resp %>% select(unfairness, emo, touch, accept, RT) %>% group_by(touch, emo) %>% summarise(count = n(), reaction_times_(ms) = mean(RT), proportion_of_acceptances = (mean(accept))*100)
unfair.resp %>% select(unfairness, emo, touch, accept, RT) %>% group_by(touch, emo) %>% summarise(count = n(), RT_in_ms = mean(RT), proportion_of_acceptances = (mean(accept))*100)
source('//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/create_ultima.R')
source('//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/create_ultima.R')
raw.data <- read.table("Data/raw_ultima.txt", header = TRUE, sep = "\t")
setwd("//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final")
raw.data <- read.table("Data/raw_ultima.txt", header = TRUE, sep = "\t")
source('//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/create_ultima.R')
setwd("//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/Data")
setwd("//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/Data")
write.csv(resp.data3, "responder.csv", row.names = FALSE)
unfair.resp = read.csv(file = "Data/responder.csv", header = TRUE)
str(unfair.resp)
source('//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/create_ultima.R')
raw.data <- read.table("raw_ultima.txt", header = TRUE, sep = "\t")
source('//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/create_ultima.R')
