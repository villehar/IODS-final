km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
lda.fit <- lda(clusters ~ ., data = km)
lda.fit <- lda(clusters$km ~ ., data = Boston)
lda.fit <- lda(cluster$km ~ ., data = Boston)
lda.fit <- lda(km$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 1, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 4, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 4, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 4)
library(MASS)
data("Boston")
str(Boston)
library(GGally)
library(ggplot2)
library(tidyr)
library(dplyr)
gather(Boston) %>% glimpse
gather(Boston) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram()
summary(Boston)
library(corrplot)
bos <- cor(Boston)
round(bos, 2)
corrplot(bos, type="upper", order="hclust",
p.mat = bos)
bostonZ <- scale(Boston)
summary(bostonZ)
bostonZ <- as.data.frame(bostonZ)
scaled_crim <- bostonZ$crim
bins <- quantile(scaled_crim)
crime <- cut(scaled_crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
bostonZ <- dplyr::select(bostonZ, -crim)
bostonZ <- data.frame(bostonZ, crime)
n <- nrow(bostonZ)
ind <- sample(n,  size = n * 0.8)
train <- bostonZ[ind,]
test <- bostonZ[-ind,]
correct_classes <- test$crime
str(test)
test <- dplyr::select(test, -crime)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 3, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
data('Boston')
BostonScaled <- scale(Boston)
dist_eu <- dist(BostonScaled)
summary(dist_eu)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
km2 <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km2$cluster)
km3 <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 3, col = classe
plot(lda.fit, dimen = 3, col = classes, pch = classes)
plot(lda.fit, dimen = 3, col = clusters, pch = clusters)
plot(lda.fit, dimen = 3, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
km3 <-kmeans(dist_eu, centers = 4)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 3, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
km3 <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = km3
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = km3$cl
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
data('Boston')
BostonScaled <- scale(Boston)
set.seed(123)
# euclidean distance matrix
dist_eu <- dist(BostonScaled)
summary(dist_eu)
# determine the maximum number of clusters
k_max <- 10
# calculate the total within sum of squares of each kmeans solution with a varying amount of clusters
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
# visualize the results
plot(1:k_max, twcss, type='b')
# k-means clustering
km2 <-kmeans(dist_eu, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km2$cluster)
km3 <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km3$cluster ~ ., data = Boston)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
plot(lda.fit, dimen = 2, col = km3$cluster, pch = km3$cluster)
lda.arrows(lda.fit, myscale = 1)
model_predictors <- dplyr::select(train, -crime)
dim(model_predictors)
dim(lda.fit$scaling)
matrix_product <- as.matrix(model_predictors) %*% lda.fit$scaling
class(model_predictors)
model_predictors <- as.matrix(model_predictors)
matrix_product <- model_predictors %*% lda.fit$scaling
class(lda.fit$scaling)
ldascaling <- lda.fit$scaling
matrix_product <- model_predictors %*% ldascaling
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(hd)
head(hd)
head(gii)
str(gii)
names(hd)
class(hd)
rename(hd, c("HDI.Rank"="rhdi", "Human.Development.Index..HDI."="hdi", "Expected.Years.of.Education"="edu", "Gross.National.Income..GNI..per.Capita"="GNI", "Country"="country", "Life.Expectancy.at.Birth"="lexp", "Mean.Years.of.Education"="eduyears", "Mean.Years.of.Education"="eduyears", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnihdi.ratio"))
rename(hd, c("HDI.Rank"="rhdi", "Human.Development.Index..HDI."="hdi", "Expected.Years.of.Education"="edu", "Gross.National.Income..GNI..per.Capita"="GNI", "Country"="country", "Life.Expectancy.at.Birth"="lexp", "Mean.Years.of.Education"="eduyears", "Mean.Years.of.Education"="eduyears", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnihdi.ratio"))
library(plyr)
rename(hd, c("HDI.Rank"="rhdi", "Human.Development.Index..HDI."="hdi", "Expected.Years.of.Education"="edu", "Gross.National.Income..GNI..per.Capita"="GNI", "Country"="country", "Life.Expectancy.at.Birth"="lexp", "Mean.Years.of.Education"="eduyears", "Mean.Years.of.Education"="eduyears", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnihdi.ratio"))
names(hd)
rename(hd, c("HDI.Rank"="rhdi", "Country"="countr", "Human.Development.Index..HDI."="hdi", "Life.Expectancy.at.Birth"="lifexp", "Expected.Years.of.Education"="eduexp", "Mean.Years.of.Education"="edumean", "Gross.National.Income..GNI..per.Capita"="gni", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnhd"))
names(hd)
rename(hd, c("HDI.Rank"="rhdi", "Country"="countr", "Human.Development.Index..HDI."="hdi", "Life.Expectancy.at.Birth"="lifexp", "Expected.Years.of.Education"="eduexp", "Mean.Years.of.Education"="edumean", "Gross.National.Income..GNI..per.Capita"="gni", "GNI.per.Capita.Rank.Minus.HDI.Rank"="gnhd"))
rename(hd, c("HDI.Rank"="rhdi", "Country"="countr", "Human.Development.Index..HDI."="hdi"))
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
human <- read.csv("data/human.csv", header = TRUE, row.names = 1)
str(human)
library(GGally)
ggpairs(human)
library(corrplot)
library(dplyr)
# plotting the correlation matrix
cor(human) %>% corrplot(, type="upper", order="hclust")
pca_human <- prcomp(human)
summary(pca_human)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
humanz <- scale(human)
pca_humanz <- prcomp(humanz)
summary(pca_humanz)
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
library(captioner)
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
library(captioner)
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
library(captioner)
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
```{r functions, include=FALSE}
fig <- local({
i <- 0
ref <- list()
list(
cap=function(refName, text) {
i <<- i + 1
ref[[refName]] <<- i
paste("Figure ", i, ": ", text, sep="")
},
ref=function(refName) {
ref[[refName]]
})
})
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
fig <- local({
i <- 0
ref <- list()
list(
cap=function(refName, text) {
i <<- i + 1
ref[[refName]] <<- i
paste("Figure ", i, ": ", text, sep="")
},
ref=function(refName) {
ref[[refName]]
})
})
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
fig <- local({
i <- 0
ref <- list()
list(
cap=function(refName, text) {
i <<- i + 1
ref[[refName]] <<- i
paste("Figure ", i, ": ", text, sep="")
},
ref=function(refName) {
ref[[refName]]
})
})
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
biplot(pca_humanz, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
install.packages("FactoMineR")
library(Factominer)
library(FactoMineR)
data("tea")
str(tea)
library(GGally)
library(ggplot2)
library(tidyr)
library(dplyr)
gather(Boston) %>% glimpse
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram()
gather(tea) %>% glimpse
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram()
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram() + stat="count"
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free", stat="count") + geom_histogram()
gather(tea) %>% ggplot(aes(value), stat="count") + facet_wrap("key", scales = "free") + geom_histogram()
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_histogram(stat="count")
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
```{r, fig.height=10}
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
library(GGally)
library(ggplot2)
library(tidyr)
library(dplyr)
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
mca <- MCA(tea, graph = FALSE)
mca <- MCA(tea, graph = FALSE)
keep_columns <- c("Tea", "always", "how", "effect.on.health", "where", "healthy", "relaxing")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("always", "how", "effect.on.health", "where", "healthy", "sophisticated")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "sophisticated", "price")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "escape.exotism")
tea_time <- select(tea, one_of(keep_columns))
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "escape.exoticism")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "age_Q")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "sex", "slimming")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "sex", "frequency")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "sex", "frequency", "work", "sugar", "spirituality", "friends")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "work", "sugar", "spirituality", "friends")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
library(devtools)
install_github("ggbiplot", "vqv")
install.packages("ggbiplot")
library(ggbiplot)
biplot(tea_time, choices = 1:2, cex = c(0.6, 1.1), col = c("grey40", "deeppink2"), expand = 1, xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
install_github("kassambara/factoextra")
library("factoextra")
library("devtools")
install_github("kassambara/factoextra")
install.packages("factoextra")
library("factoextra")
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text"),
label = "all", invisible = "none", labelsize = 4, pointsize = 2,
habillage = "none", addEllipses = FALSE, ellipse.level = 0.95,
col.ind = "blue", col.ind.sup = "darkblue", alpha.ind = 1,
col.var = "red", alpha.var = 1, col.quanti.sup = "blue",
col.quali.sup = "darkgreen", shape.ind = 19, shape.var = 17,
select.var = list(name = NULL, cos2 = NULL, contrib = NULL),
select.ind = list(name = NULL, cos2 = NULL, contrib = NULL),
map = "symmetric", arrows = c(FALSE, FALSE),
jitter = list(what = "label", width = NULL, height = NULL), ...)
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text"))
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text"))
p <- fviz_mca_ind(mca, label="none", habillage=grp,
addEllipses=TRUE, ellipse.level=0.95)
p <- fviz_mca_ind(mca, label="none",
addEllipses=TRUE, ellipse.level=0.95)
print(p)
p <- fviz_mca_ind(mca, label="none")
print(p)
fviz_mca_biplot(X, axes = c(1, 2), geom = c("point", "arrow"),
label = "none")
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "arrow"),
label = "none")
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all")
library(dplyr)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
cor(human) %>% corrplot(human, type="upper", order="hclust")
cor(human) %>% corrplot(, type="upper", order="hclust")
keep_columns <- c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")
tea_time <- select(tea, one_of(keep_columns))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
select(tea, -age) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea) %>% select(tea, -age) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
str(tea)
gather(tea) %>% select(tea, -age) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
tea_time <- select(tea, -age)
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
tea_time <- select(tea, one_of(c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
mca <- MCA(tea_time, graph = FALSE)
summary(mca)
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all")
library(ggplot2)
library(tidyr)
library(dplyr)
tea_time <- select(tea, one_of(c("how", "effect.on.health", "where", "healthy", "price", "tearoom", "frequency", "sugar")))
gather(tea_time) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
raw.data <- read.table("Data/raw_ultima.txt", header = TRUE, sep = "\t")
setwd("//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final")
raw.data <- read.table("Data/raw_ultima.txt", header = TRUE, sep = "\t")
str(raw.data)
library(dplyr)
raw.data <- select(raw.data, -pp.gender)
names(raw.data)
names(raw.data)[8] <- "emo"
names(raw.data)[9] <- "touch"
names(raw.data)[10] <- "offers"
names(raw.data)[11] <- "Fairness"
names(raw.data)[14] <- "accept"
names(raw.data)[15] <- "Cardiac_OR"
names(raw.data)[20] <- "no_problem"
glimpse(raw.data)
names(raw.data)
cols <- c(13, 17, 19, 20, 14)
raw.data[,cols] <- raw.data[,cols] == 1
str(raw.data)
resp.data <- filter(raw.data, myrole == "responder")
str(resp.data)
agg.accept <- aggregate(resp.data, by=list(resp.data$pp), FUN=mean)
agg.accept <- select(agg.accept, pp, accept)
names(agg.accept)[2]<-"accept.prop"
str(agg.accept)
resp.data2 <- inner_join(resp.data, agg.accept, by = "pp")
str(resp.data2)
resp.data2 <- mutate(resp.data2, over90 = (accept.prop < .90))
str(resp.data2)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE)
dim(resp.data3)
str(resp.data3)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE)
str(resp.data3)
source('//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/create_ultima.R')
ggplot(resp.data3, aes(x = RT, y = Cardia_OR)) + geom_point()
ggplot(resp.data3, aes(x = RT, y = Cardiac_OR)) + geom_point()
summarise(resp.data3$RT)
class(resp.data3$RT)
resp.data3$RT <- as.numeric(resp.data3)
summary(resp.data3)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 10000)
str(resp.data3)
write.csv(resp.data3, "responder.csv")
ggplot(resp.data3, aes(x = RT, y = Cardiac_OR)) + geom_point()
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 10000, ECGFILT == TRUE)
str(resp.data3)
write.csv(resp.data3, "responder.csv")
ggplot(resp.data3, aes(x = RT, y = Cardiac_OR)) + geom_point()
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 5000, ECGFILT == TRUE)
str(resp.data3)
write.csv(resp.data3, "responder.csv")
ggplot(resp.data3, aes(x = RT, y = Cardiac_OR)) + geom_point()
summary(resp.data3)
ggplot(resp.data3, aes(x = RT)) + geom_histogram()
ggplot(resp.data3, aes(x = RT)) + geom_histogram(bins = 15)
ggplot(resp.data3, aes(x = RT)) + geom_histogram(bins = 100)
resp.data3$Block <-cut(resp.data3$trial, c(1,300,596))
ggplot(resp.data3, aes(x = RT, col = Block)) + geom_histogram(bins = 100)
resp.data3$Block <-cut(resp.data3$trial, c(1,150,300,600))
ggplot(resp.data3, aes(x = RT, col = Block)) + geom_histogram(bins = 100)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 5000, RT > 50, ECGFILT == TRUE)
resp.data3$Block <-cut(resp.data3$trial, c(1,150,300,600))
ggplot(resp.data3, aes(x = RT, col = Block)) + geom_histogram(bins = 100)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 3000, RT > 50, ECGFILT == TRUE)
resp.data3$Block <-cut(resp.data3$trial, c(1,150,300,600))
ggplot(resp.data3, aes(x = RT, col = Block)) + geom_histogram(bins = 100)
resp.data3$Block <-cut(resp.data3$trial, c(1,150,300,450,600))
ggplot(resp.data3, aes(x = RT, col = Block)) + geom_histogram(bins = 100)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 3000, ECGFILT == TRUE)
resp.data3$Block <-cut(resp.data3$trial, c(1,150,300,450,600))
ggplot(resp.data3, aes(x = RT, col = Block)) + geom_histogram(bins = 100)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 3000, RT > 25, ECGFILT == TRUE)
str(resp.data3)
resp.data3$Block <-cut(resp.data3$trial, c(1,150,300,450,600))
ggplot(resp.data3, aes(x = RT, col = Block)) + geom_histogram(bins = 100)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 3000, RT > 50, ECGFILT == TRUE)
resp.data3$Block <-cut(resp.data3$trial, c(1,150,300,450,600))
ggplot(resp.data3, aes(x = RT, col = Block)) + geom_histogram(bins = 100)
write.csv(resp.data3, "responder.csv")
source('//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/create_ultima.R')
ggplot(resp.data3, aes(x = RT, col = touch)) + geom_histogram(bins = 100)
ggplot(resp.data3, aes(x = RT, col = emo)) + geom_histogram(bins = 100)
ggplot(resp.data3, aes(x = RT, col = Fairness)) + geom_histogram(bins = 100)
ggplot(resp.data3, aes(x = RT, col = Block)) + geom_histogram(bins = 100)
source('//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/create_ultima.R')
m <- glm(accept ~ Fairness + emo + touch, data = resp.data3, family = "binomial")
summary(m)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 5000, ECGFILT == TRUE)
m <- glm(accept ~ Fairness + emo + touch, data = resp.data3, family = "binomial")
summary(m)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 3000, ECGFILT == TRUE)
m <- glm(accept ~ Fairness + emo + touch, data = resp.data3, family = "binomial")
summary(m)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 6000, ECGFILT == TRUE)
m <- glm(accept ~ Fairness + emo + touch, data = resp.data3, family = "binomial")
summary(m)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 3500, ECGFILT == TRUE)
summary(m)
resp.data3 <- filter(resp.data2, over90 == TRUE, no_problem == TRUE, notknow_ult == TRUE, RT < 5000, ECGFILT == TRUE)
m <- glm(accept ~ Fairness + emo + touch, data = resp.data3, family = "binomial")
summary(m)
OR <- coef(m) %>% exp
CI <- confint(m) %>% exp
cbind(OR, CI)
source('//home.org.aalto.fi/harjunv1/data/Desktop/GitHub/IODS-final/create_ultima.R')
